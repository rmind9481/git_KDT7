# ------------------------------------------------------------------
# str 타입과 연산자
# ------------------------------------------------------------------



# [1] 덧셈(+) 연산자

#   -문법 : str + str 
#   -기능 : 문자열 연결해서 새로운 문자열 생성



data1 = "Happy"
data2 = "2025"
data3 = 2025
data4 = 2025.5
data5 = True

# str + str
print(f"{data1} + {data2} => {data1+data2}")

# str + int => str + str(int)
print(f"{data1} + {data3} => {data1+str(data3)}")

# str + int => str + str(float)
print(f"{data1} + {data4} => {data1+str(data4)}")

# str + int => str + str(Bool)
print(f"{data1} + {data5} => {data1+str(data5)}")



# ----------------------------------------------------------------------------------------
# [2] 곱셈(+)연산자 
#   - 문법 : str* int
#   - 기능 : 정수 숫자 만큼 str을 반복 연결해서
#           새로운 문자열 생성
# -----------------------------------------------------------------------------------------


# - str * str ===> ERROR 미지원
# print(f" {data1} * {"Good"} = {data1 * "Goood"}")


# - str * int ==> 지원
print(f"{data1} * 3 = {data1*3}")

# - str * int(str) ==> 지원
# int(str)  : 0 ~ 9, -해당하는 경우만 int 형변환 가능

#print(f"{data1} * '3' = {data1*'3'}")



# - str * float ==> ERROR 미지원
print(f"{data1} * 3.5  = {data1*int(3.5)}")


# -------------------------------------------------------------------
# [3] 나머지(%) 연산자
#       - 문법 : " %알바펫 1개 "
#       - 기능 : 특정 데이터 타입의 데이터를 문자열에 위치/포함 시켜줌
#       - %d   : 10진수 정수
#       - %f   : 실수
#       - %s   : 문자열
# -------------------------------------------------------------------

name = "홍길동"
age = 100
value = 99.9

# 출력 => 내ㅔ 이름은 000이고 00살이야!

print("내 이름은", name, "이고", age, "살이야!")



# 방법1 => 형식/서식지정자 : " %알파벳 1개 " %(변수명)


print("내 이름은 %s 이고 %d 살이야!" %(name,age))


print("내 이름은 %s 이고 %d 살이야! %f%% 만족합니다." %(name,age,value))


# 묵시적 => 형 변환 적용 : 모든 데이터를 str()형변환 적용
print("내 이름은 %s 이고 %s 살이야! %s%% 만족합니다." %(name,age,value))


# 방법2 => f-string 방법 : f" {변수명} {데이터} "
print(f"내 이름은 {name}이고, {age} 살이야! {value}%만족 합니다.")

